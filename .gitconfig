[color]
	ui = auto
[merge]
	log = true
[instaweb]
	local = true
	httpd = /usr/sbin/apache2 -f
	port = 4321
	modulepath = /usr/lib/apache2/modules
[web]
	browser = firefox
[push]
	default = tracking
[alias]
	# NOTE: git uses 'sh'
	# find some nice examples at: https://git.wiki.kernel.org/index.php/Aliases

	add-p = add -p
	adp = add -p
	civ = commit -v
	# clone repo, make remote "origin" for first arg and "upstream" for second
	clone-fork = "!_git_clone_fork () { fork=$1 upstream=$2; forkdir=${3:-${fork##*/}}; forkdir=${forkdir%.git}; git clone $fork; cd ${forkdir}; git remote add upstream $upstream; }; _git_clone_fork"
	current-branch = "!git branch | awk '/^[*] / { print $2 }'"

	vimdiff = !vim +Gdiff

	ix      = diff --cached

	diffstat = diff --stat
	diffst   = diff --stat

	# show char-by-char (or word-by-word) differences instead of whole lines
	ixcw    = diff   --color-words=. --cached
	ixcww   = diff   --color-words=\\\\w+ --cached
	diffcw  = diff   --color-words=.
	diffcww = diff   --color-words=\\\\w+
	logpcw  = log -p --color-words=.
	logpcww = log -p --color-words=\\\\w+

	diffwithsubs = "!git submodule summary; git diff"

	# the sha1 for an empty tree in case you want to compare something to a bare repo
	empty-tree-sha1 = hash-object -t tree /dev/null

	# change github username
	#fix-github-remote = "!sed -i -re 's/(github.com:)magnificent-tears/\\1rwstauner/' .git/config"

	grep-todo = grep -iE 'to.?do|fix.?me'
	#homepage-metacpan = "!curl -v -d \"login=`git config github.user`&token=`git config github.token`&values[homepage]=http://metacpan.org/release/${PWD##*/}\" \"https://github.com/api/v2/json/repos/show/rwstauner/${PWD##*/}\""

	# uses patchutils/interdiff to see upstream modifications b/t two commits (origin/master and local branch)
	intercommit = !sh -c 'git show "$1" > .git/commit1 && git show "$2" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -
	# gitk
	k = !gitk
	kv = !vim +Gitv

	# there must be a better way
	last-sha = "!git show HEAD --oneline | head -n1 | awk '{print $1}'"
	last-tag = "!git describe --tags --long | sed -re 's/-[0-9]+-g[a-f0-9]+$//'"

	# show new commits after last fetch
	lc = log ORIG_HEAD.. --stat --no-merges

	logstat = log --stat
	logst   = log --stat

	log-since-tag = "!_git_log_since_tag () { tag=`git last-tag`; revs=$tag..HEAD; git log $* $revs; echo '\n=== '$revs' ===\n'; git tag-summary $tag; }; _git_log_since_tag"

	# what new commits have been created by the last command (like "git pull")
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

	prune-all = !git remote | xargs -n 1 git remote prune

	branch-to-remote = "!_git_branch_to_remote () { branch=${1:-`git current-branch`} remote=${2:-origin}; git config branch.$branch.remote $remote; git config branch.$branch.merge refs/heads/$branch; }; _git_branch_to_remote"
	branch-track = "!_git_branch_track () { branch=${1} remote=${2:-origin}; git branch --track $branch remotes/$remote/$branch; }; _git_branch_track"

	# run daemon (use !git to run from repo root) then try git ls-remote
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	st = status -s -b -u
	tag-summary = "!_git_tag_summary () { git show --summary ${1:-`git last-tag`}; }; _git_tag_summary"

	# whois takes a name or email
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	# whatis takes a commit name
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
# #
# NOTE: above file copied from git repo. make changes there.
# NOTE: append custom local config below
#
# [user] name, email
# [url work] insteadOf
# [url private] insteadOf
# [github] user, token
# [url github] insteadOf
# #
