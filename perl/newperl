#!/usr/bin/env perl
# http://www.dagolden.com/index.php/2134/how-i-manage-new-perls-with-perlbrew/

use v5.10;
use strict;
use warnings;
use FindBin '$Bin';
use autodie qw/:all/;

my $as = shift
  or die "Usage: $0 <perl-version>";
my @args = @ARGV;

my %flag_defs = (
  t => [qw/-D usethreads/],
  s => [qw/-D useshrplib/],
  f => [qw/-Dcccdlflags=-fPIC/],
);
my %flags = map { ($_ => 1) } grep { defined } split //, ($as =~ /-?([a-z]+)$/)[0] || '';
push @args, map { @{ $flag_defs{$_} || [] } } keys %flags;

$as =~ s/^5\.//;
my $perl = "5.$as";
$perl =~ s/-?[a-z]+$//; # Strip trailing flags.
my $lib = $as . '@std';

my @test_reports = qw(
  Test::Reporter::Transport::Socket
  CPAN::Reporter
);

# AnyEvent uses live DNS tests and my stupid ISP DNS is overly helpful.
my @problem_modules = qw(
  AnyEvent
  Net::Server::PreFork
);

my @install_groups;
{
  my $group = 0;
  local @ARGV = "$Bin/install.txt";
  while( <> ){
    # Use comments and blank lines to separate groups.
    ++$group, next if /^\s*(#.+)?$/;

    push @{ $install_groups[$group] ||= [] }, $_;
  }
  $install_groups[$group + 1] = [`$Bin/my_dists.pl -d`];
}
{
  my $i = -1;
  while( ++$i < @install_groups ){
    next if $install_groups[$i] && @{ $install_groups[$i] };
    splice(@install_groups, $i, 1);
    redo;
  }
}
chomp(@$_) for @install_groups;

my @no_man = qw/-D man1dir=none -D man3dir=none/;

# Don't prompt me.
close STDIN;

sub run {
  print "run: @_\n";
  system @_; # autodie
}

# install perl and lock it down
run( qw/perlbrew install -j 9 --as/, $as, $perl, @no_man, @args );
run( qw/chmod -R a-w/, "$ENV{HOME}/perl5/perlbrew/perls/$as" );

# give us a local::lib for installing things
run( qw/perlbrew lib create/, $lib );

# NOTE: We basically ignore the result of the cpan calls... most modules
# should get installed eventually... if there's a big problem we'll notice.
my $cpan = 'cpan';
sub cpan {
  run( qw/perlbrew exec --with/, $lib || $as, $cpan, @_ );
}

# let's avoid any pod tests when we try to install stuff
cpan( qw/TAP::Harness::Restricted/ );
local $ENV{HARNESS_SUBCLASS} = "TAP::Harness::Restricted";

# Setup test reports before installing anything else.
cpan( @test_reports );

# some things need forcing
cpan( -f => @problem_modules )
  if @problem_modules;

# Install the rest (retry to catch any circularity problems).
cpan( @$_ )
  for (@install_groups) x 2;
